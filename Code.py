# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mYGp_1oWrJpNL9AUsPCjhro-C3znZwCP
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import cross_val_score

df=pd.read_csv('train_upd.csv')

def enc(k):

   if k=='4G_RAN_CONGESTION':
      return 1

   elif k=='4G_BACKHAUL_CONGESTION':
      return 2

   elif k=='3G_BACKHAUL_CONGESTION':
      return 3

   else :
      return 0
df['Congestion_Type'] = df['Congestion_Type'].apply(enc)

y=df['Congestion_Type']
y=pd.DataFrame(y)
#df.drop(['Congestion_Type'],axis=1)
X=df.drop(['cell_name','Congestion_Type','par_year','par_month'],axis=1)


dummies=pd.get_dummies(X['ran_vendor'],prefix='ran_vendor')
X=pd.concat([X,dummies],axis=1)
X.drop(['ran_vendor'],axis=1,inplace=True)

X1=X['4G_rat']
X1=pd.DataFrame(X1)
X2=X.iloc[:,34:]

X_feat=X.iloc[:,1:34]
X_feat=np.log(X_feat)

def nozero(c):
    if(c<0):
        return 0
    else: 
        return c

X_feat['par_hour']=X_feat['par_hour'].apply(nozero)

X_feat['cloud_computing_total_bytes']=X_feat['cloud_computing_total_bytes'].apply(nozero)
X_feat['web_security_total_bytes']=X_feat['web_security_total_bytes'].apply(nozero)
X_feat['gaming_total_bytes']=X_feat['gaming_total_bytes'].apply(nozero)
X_feat['health_total_bytes']=X_feat['health_total_bytes'].apply(nozero)
X_feat['file_sharing_total_bytes']=X_feat['file_sharing_total_bytes'].apply(nozero)
X_feat['remote_access_total_bytes']=X_feat['remote_access_total_bytes'].apply(nozero)
X_feat['photo_sharing_total_bytes']=X_feat['photo_sharing_total_bytes'].apply(nozero)
X_feat['software_dwnld_total_bytes']=X_feat['software_dwnld_total_bytes'].apply(nozero)
X_feat['marketplace_total_bytes']=X_feat['marketplace_total_bytes'].apply(nozero)
X_feat['storage_services_total_bytes']=X_feat['storage_services_total_bytes'].apply(nozero)
X_feat['audio_total_bytes']=X_feat['audio_total_bytes'].apply(nozero)
X_feat['location_services_total_bytes']=X_feat['location_services_total_bytes'].apply(nozero)
X_feat['advertisement_total_bytes']=X_feat['advertisement_total_bytes'].apply(nozero)
X_feat['system_total_bytes']=X_feat['system_total_bytes'].apply(nozero)
X_feat['voip_total_bytes']=X_feat['voip_total_bytes'].apply(nozero)
X_feat['speedtest_total_bytes']=X_feat['speedtest_total_bytes'].apply(nozero)
X_feat['email_total_bytes']=X_feat['email_total_bytes'].apply(nozero)
X_feat['weather_total_bytes']=X_feat['weather_total_bytes'].apply(nozero)
X_feat['media_total_bytes']=X_feat['media_total_bytes'].apply(nozero)
X_feat['mms_total_bytes']=X_feat['mms_total_bytes'].apply(nozero)
X_feat['others_total_bytes']=X_feat['others_total_bytes'].apply(nozero)


from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X_feat)
X_feat=scaler.transform(X_feat)
X_feat=pd.DataFrame(X_feat)
X_real=pd.concat([X1,X_feat,X2],axis=1)
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X_real,y,test_size=0.25,random_state=0)
'''
from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

from sklearn.metrics import accuracy_score, matthews_corrcoef
acc=accuracy_score(y_test,y_pred)
'''
'''
from sklearn.ensemble import GradientBoostingClassifier
clf = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0,
                                 max_depth=1, random_state=0).fit(X_real, y)
clf.feature_importances_'''
from sklearn.metrics import  matthews_corrcoef, make_scorer
from sklearn.ensemble import VotingClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
clf = SVC(kernel = 'linear', random_state = 0)
clf1=GradientBoostingClassifier(n_estimators=100, learning_rate=1.0,
                                 max_depth=1, random_state=0)
clf2=KNeighborsClassifier(n_neighbors=5,leaf_size=30, p=2, metric='minkowski')
eclf = VotingClassifier(estimators=[('svc', clf), ('gbc', clf1), ('knc',clf2)],voting='hard')
scorer=make_scorer(matthews_corrcoef)
for clf, label in zip([clf, clf1, clf2, eclf], ['SVC', 'GradBoost','KNC', 'Ensemble']):
     scores = cross_val_score(clf, X_real, y, scoring=scorer, cv=3)
     print("MCC: %0.2f (+/- %0.2f) [%s]" % (scores.mean(), scores.std(), label))